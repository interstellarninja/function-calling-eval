2024-01-31:23:38:50,176 INFO     [evaluator.py:54] MistralConfig {
  "_name_or_path": "NousResearch/func-calling-v0_50-fft",
  "architectures": [
    "MistralForCausalLM"
  ],
  "attention_dropout": 0.0,
  "bos_token_id": 1,
  "eos_token_id": 32000,
  "hidden_act": "silu",
  "hidden_size": 4096,
  "initializer_range": 0.02,
  "intermediate_size": 14336,
  "max_position_embeddings": 32768,
  "model_type": "mistral",
  "num_attention_heads": 32,
  "num_hidden_layers": 32,
  "num_key_value_heads": 8,
  "quantization_config": {
    "bnb_4bit_compute_dtype": "float32",
    "bnb_4bit_quant_type": "nf4",
    "bnb_4bit_use_double_quant": true,
    "llm_int8_enable_fp32_cpu_offload": false,
    "llm_int8_has_fp16_weight": false,
    "llm_int8_skip_modules": null,
    "llm_int8_threshold": 6.0,
    "load_in_4bit": true,
    "load_in_8bit": false,
    "quant_method": "bitsandbytes"
  },
  "rms_norm_eps": 1e-05,
  "rope_theta": 10000.0,
  "sliding_window": 4096,
  "tie_word_embeddings": false,
  "torch_dtype": "bfloat16",
  "transformers_version": "4.37.0",
  "use_cache": false,
  "vocab_size": 32002
}

2024-01-31:23:38:50,178 INFO     [evaluator.py:55] GenerationConfig {
  "bos_token_id": 1,
  "eos_token_id": 32000
}

2024-01-31:23:38:50,178 INFO     [evaluator.py:56] <bound method Module.parameters of MistralForCausalLM(
  (model): MistralModel(
    (embed_tokens): Embedding(32002, 4096)
    (layers): ModuleList(
      (0-31): 32 x MistralDecoderLayer(
        (self_attn): MistralFlashAttention2(
          (q_proj): Linear4bit(in_features=4096, out_features=4096, bias=False)
          (k_proj): Linear4bit(in_features=4096, out_features=1024, bias=False)
          (v_proj): Linear4bit(in_features=4096, out_features=1024, bias=False)
          (o_proj): Linear4bit(in_features=4096, out_features=4096, bias=False)
          (rotary_emb): MistralRotaryEmbedding()
        )
        (mlp): MistralMLP(
          (gate_proj): Linear4bit(in_features=4096, out_features=14336, bias=False)
          (up_proj): Linear4bit(in_features=4096, out_features=14336, bias=False)
          (down_proj): Linear4bit(in_features=14336, out_features=4096, bias=False)
          (act_fn): SiLU()
        )
        (input_layernorm): MistralRMSNorm()
        (post_attention_layernorm): MistralRMSNorm()
      )
    )
    (norm): MistralRMSNorm()
  )
  (lm_head): Linear(in_features=4096, out_features=32002, bias=False)
)>
2024-01-31:23:38:50,179 INFO     [evaluator.py:57] {% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% for message in messages %}{{'<|im_start|>' + message['role'] + '
' + message['content'] + '<|im_end|>' + '
'}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
' }}{% endif %}
2024-01-31:23:38:50,179 INFO     [evaluator.py:58] {'bos_token': '<s>', 'eos_token': '<|im_end|>', 'unk_token': '<unk>', 'pad_token': '<|im_end|>'}
2024-01-31:23:38:57,216 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_hotel", "description": "Search for a hotel based on given criteria", "parameters": {"type": "object", "properties": {"destination": {"type": "string", "description": "The destination of the hotel"}, "check_in_date": {"type": "string", "description": "The check-in date (YYYY-MM-DD)"}, "check_out_date": {"type": "string", "description": "The check-out date (YYYY-MM-DD)"}}, "required": ["destination", "check_in_date", "check_out_date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to find a hotel in Paris for my upcoming trip. I'll be there from 2022-05-01 to 2022-05-10.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'destination': 'Paris', 'check_in_date': '2022-05-01', 'check_out_date': '2022-05-10'}, 'name': 'search_hotel'}
</tool_call>
<|im_end|>
2024-01-31:23:38:57,219 INFO     [evaluator.py:113] search_hotel validation: passed
2024-01-31:23:38:57,220 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:38:57,220 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "destination": "Paris",
      "check_in_date": "2022-05-01",
      "check_out_date": "2022-05-10"
    },
    "name": "search_hotel"
  }
]
2024-01-31:23:39:00,922 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "roll_dice", "description": "Roll a dice", "parameters": {"type": "object", "properties": {"sides": {"type": "integer", "description": "The number of sides on the dice"}, "quantity": {"type": "integer", "description": "The number of dice to roll"}}, "required": ["sides", "quantity"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I'm playing a board game and I lost my dice. Can you roll a 6-sided dice for me?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'sides': 6, 'quantity': 1}, 'name': 'roll_dice'}
</tool_call>
<|im_end|>
2024-01-31:23:39:00,922 INFO     [evaluator.py:113] roll_dice validation: passed
2024-01-31:23:39:00,922 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:00,922 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "sides": 6,
      "quantity": 1
    },
    "name": "roll_dice"
  }
]
2024-01-31:23:39:06,221 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_fuel_cost", "description": "Calculate the cost of fuel for a trip", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance of the trip in kilometers"}, "fuel_price": {"type": "number", "description": "The price of fuel per liter"}, "fuel_efficiency": {"type": "number", "description": "The fuel efficiency of the vehicle in kilometers per liter"}}, "required": ["distance", "fuel_price", "fuel_efficiency"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I am planning a road trip and I need to calculate the cost of fuel. The trip is 500 kilometers, the price of fuel is $1.2 per liter and my car's fuel efficiency is 10 kilometers per liter. Can you help me with this?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'distance': 500, 'fuel_price': 1.2, 'fuel_efficiency': 10}, 'name': 'calculate_fuel_cost'}
</tool_call>
<|im_end|>
2024-01-31:23:39:06,221 INFO     [evaluator.py:113] calculate_fuel_cost validation: passed
2024-01-31:23:39:06,221 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:06,221 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "distance": 500,
      "fuel_price": 1.2,
      "fuel_efficiency": 10
    },
    "name": "calculate_fuel_cost"
  }
]
2024-01-31:23:39:10,056 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_movies", "description": "Search for movies based on a keyword", "parameters": {"type": "object", "properties": {"keyword": {"type": "string", "description": "The keyword to search for movies"}, "year": {"type": "integer", "description": "The year of release (optional)"}}, "required": ["keyword"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I want to watch a movie tonight. Can you suggest some movies related to space exploration?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'keyword': 'space exploration', 'year': 2010}, 'name': 'search_movies'}
</tool_call>
<|im_end|>
2024-01-31:23:39:10,056 INFO     [evaluator.py:113] search_movies validation: passed
2024-01-31:23:39:10,056 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:10,056 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "keyword": "space exploration",
      "year": 2010
    },
    "name": "search_movies"
  }
]
2024-01-31:23:39:14,222 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "analyze_image", "description": "Analyze the content of an image", "parameters": {"type": "object", "properties": {"image_url": {"type": "string", "description": "The URL of the image. Format would be url."}}, "required": ["image_url"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I have an image and I want to know what's in it. Can you help me?<|im_end|> 
<|im_start|> assistant
Of course! Please provide me with the URL of the image.<|im_end|> 
<|im_start|> user
Sure, here it is: https://example.com/myimage.jpg<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'image_url': 'https://example.com/myimage.jpg'}, 'name': 'analyze_image'}
</tool_call>
<|im_end|>
2024-01-31:23:39:14,223 INFO     [evaluator.py:113] analyze_image validation: passed
2024-01-31:23:39:14,223 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:14,223 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "image_url": "https://example.com/myimage.jpg"
    },
    "name": "analyze_image"
  }
]
2024-01-31:23:39:17,383 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_movie", "description": "Search for a movie based on a keyword", "parameters": {"type": "object", "properties": {"keyword": {"type": "string", "description": "The keyword to search for in movie titles"}}, "required": ["keyword"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, can you help me find a movie?<|im_end|> 
<|im_start|> assistant
Of course! Could you please provide me with a keyword to search for in movie titles?<|im_end|> 
<|im_start|> user
Sure, let's go with "space".<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'keyword': 'space'}, 'name': 'search_movie'}
</tool_call>
<|im_end|>
2024-01-31:23:39:17,384 INFO     [evaluator.py:113] search_movie validation: passed
2024-01-31:23:39:17,384 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:17,384 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "keyword": "space"
    },
    "name": "search_movie"
  }
]
2024-01-31:23:39:20,973 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "analyze_website", "description": "Analyze a website for SEO purposes", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The URL of the website to analyze"}}, "required": ["url"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need help with my website's SEO. Can you analyze it for me?<|im_end|> 
<|im_start|> assistant
Of course, I can help with that. Please provide me with the URL of your website.<|im_end|> 
<|im_start|> user
Sure, it's www.mywebsite.com.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'url': 'www.mywebsite.com'}, 'name': 'analyze_website'}
</tool_call>
<|im_end|>
2024-01-31:23:39:20,973 INFO     [evaluator.py:113] analyze_website validation: passed
2024-01-31:23:39:20,973 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:20,973 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "url": "www.mywebsite.com"
    },
    "name": "analyze_website"
  }
]
2024-01-31:23:39:23,722 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_news", "description": "Get the latest news", "parameters": {"type": "object", "properties": {}}}}, {"type": "function", "function": {"name": "calculate_distance", "description": "Calculate the distance between two locations", "parameters": {"type": "object", "properties": {"source": {"type": "string", "description": "The source location"}, "destination": {"type": "string", "description": "The destination location"}}, "required": ["source", "destination"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you tell me the latest news?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {}, 'name': 'get_news'}
</tool_call>
<|im_end|>
2024-01-31:23:39:23,722 INFO     [evaluator.py:113] get_news validation: passed
2024-01-31:23:39:23,722 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:23,722 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {},
    "name": "get_news"
  }
]
2024-01-31:23:39:27,169 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_podcast", "description": "Search for a podcast", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the podcast"}, "host": {"type": "string", "description": "The host of the podcast"}, "genre": {"type": "string", "description": "The genre of the podcast"}}, "required": ["title"]}}}, {"type": "function", "function": {"name": "create_user_account", "description": "Create a new user account", "parameters": {"type": "object", "properties": {"username": {"type": "string", "description": "The username for the new account"}, "email": {"type": "string", "description": "The email address for the new account"}, "password": {"type": "string", "description": "The password for the new account"}}, "required": ["username", "email", "password"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I am looking for a podcast. The title is "The Daily".<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'title': 'The Daily'}, 'name': 'search_podcast'}
</tool_call>
<|im_end|>
2024-01-31:23:39:27,170 INFO     [evaluator.py:113] search_podcast validation: passed
2024-01-31:23:39:27,170 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:27,170 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "title": "The Daily"
    },
    "name": "search_podcast"
  }
]
2024-01-31:23:39:29,936 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_news", "description": "Get the latest news", "parameters": {"type": "object", "properties": {}, "required": []}}}, {"type": "function", "function": {"name": "calculate_fuel_efficiency", "description": "Calculate the fuel efficiency in terms of miles per gallon", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance traveled in miles"}, "fuel_consumed": {"type": "number", "description": "The amount of fuel consumed in gallons"}}, "required": ["distance", "fuel_consumed"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you tell me the latest news?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {}, 'name': 'get_news'}
</tool_call>
<|im_end|>
2024-01-31:23:39:29,936 INFO     [evaluator.py:113] get_news validation: passed
2024-01-31:23:39:29,936 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:29,936 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {},
    "name": "get_news"
  }
]
2024-01-31:23:39:33,311 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_area", "description": "Calculate the area of a circle", "parameters": {"type": "object", "properties": {"radius": {"type": "number", "description": "The radius of the circle"}}, "required": ["radius"]}}}, {"type": "function", "function": {"name": "calculate_discount", "description": "Calculate the discounted price of a product", "parameters": {"type": "object", "properties": {"original_price": {"type": "number", "description": "The original price of the product"}, "discount_percentage": {"type": "number", "description": "The discount percentage"}}, "required": ["original_price", "discount_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I need to calculate the area of a circle with a radius of 5.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'radius': 5}, 'name': 'calculate_area'}
</tool_call>
<|im_end|>
2024-01-31:23:39:33,311 INFO     [evaluator.py:113] calculate_area validation: passed
2024-01-31:23:39:33,311 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:33,312 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "radius": 5
    },
    "name": "calculate_area"
  }
]
2024-01-31:23:39:37,223 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "add_numbers", "description": "Add two numbers", "parameters": {"type": "object", "properties": {"number1": {"type": "number", "description": "The first number"}, "number2": {"type": "number", "description": "The second number"}}, "required": ["number1", "number2"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need help with some calculations.<|im_end|> 
<|im_start|> assistant
Of course! I'm here to help. What calculations do you need assistance with?<|im_end|> 
<|im_start|> user
I need to add 45 and 67. Can you do that?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'number1': 45, 'number2': 67}, 'name': 'add_numbers'}
</tool_call>
<|im_end|>
2024-01-31:23:39:37,224 INFO     [evaluator.py:113] add_numbers validation: passed
2024-01-31:23:39:37,224 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:37,224 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "number1": 45,
      "number2": 67
    },
    "name": "add_numbers"
  }
]
2024-01-31:23:39:42,928 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "check_movie_showtimes", "description": "Check showtimes for a particular movie", "parameters": {"type": "object", "properties": {"movie_title": {"type": "string", "description": "The title of the movie"}, "location": {"type": "string", "description": "The city or theater location"}, "date": {"type": "string", "description": "The date to check showtimes. Format would be date."}}, "required": ["movie_title", "location", "date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, can you check the showtimes for the movie "Inception" in New York City on 2022-12-25?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'movie_title': 'Inception', 'location': 'New York City', 'date': '2022-12-25'}, 'name': 'check_movie_showtimes'}
</tool_call>
<|im_end|>
2024-01-31:23:39:42,928 INFO     [evaluator.py:113] check_movie_showtimes validation: passed
2024-01-31:23:39:42,928 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:42,929 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "movie_title": "Inception",
      "location": "New York City",
      "date": "2022-12-25"
    },
    "name": "check_movie_showtimes"
  }
]
2024-01-31:23:39:46,980 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_movies", "description": "Search for movies based on a keyword", "parameters": {"type": "object", "properties": {"keyword": {"type": "string", "description": "The keyword for movie search"}, "year": {"type": "integer", "description": "The release year of the movie"}}, "required": ["keyword"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I am looking for a movie to watch tonight. Can you suggest something?<|im_end|> 
<|im_start|> assistant
Of course! To help you better, could you please provide me with a keyword or a specific year you are interested in?<|im_end|> 
<|im_start|> user
I am interested in sci-fi movies from the 90s.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'keyword': 'sci-fi', 'year': 1990}, 'name': 'search_movies'}
</tool_call>
<|im_end|>
2024-01-31:23:39:46,980 INFO     [evaluator.py:113] search_movies validation: passed
2024-01-31:23:39:46,980 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:46,980 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "keyword": "sci-fi",
      "year": 1990
    },
    "name": "search_movies"
  }
]
2024-01-31:23:39:53,040 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_stock_history", "description": "Get the historical data of a stock", "parameters": {"type": "object", "properties": {"symbol": {"type": "string", "description": "The stock symbol"}, "start_date": {"type": "string", "description": "The start date of the historical data"}, "end_date": {"type": "string", "description": "The end date of the historical data"}}, "required": ["symbol", "start_date", "end_date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, can you get me the historical data for Apple stock from January 1, 2020 to December 31, 2020?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'symbol': 'AAPL', 'start_date': '2020-01-01', 'end_date': '2020-12-31'}, 'name': 'get_stock_history'}
</tool_call>
<|im_end|>
2024-01-31:23:39:53,040 INFO     [evaluator.py:113] get_stock_history validation: passed
2024-01-31:23:39:53,041 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:53,041 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "symbol": "AAPL",
      "start_date": "2020-01-01",
      "end_date": "2020-12-31"
    },
    "name": "get_stock_history"
  }
]
2024-01-31:23:39:56,940 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_definition", "description": "Get the definition of a word", "parameters": {"type": "object", "properties": {"word": {"type": "string", "description": "The word to get the definition of"}, "language": {"type": "string", "enum": ["english", "spanish", "french", "german"], "description": "The language of the word"}}, "required": ["word", "language"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, can you tell me the definition of the word 'amour' in French?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'word': 'amour', 'language': 'french'}, 'name': 'get_definition'}
</tool_call>
<|im_end|>
2024-01-31:23:39:56,941 INFO     [evaluator.py:113] get_definition validation: passed
2024-01-31:23:39:56,942 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:39:56,942 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "word": "amour",
      "language": "french"
    },
    "name": "get_definition"
  }
]
2024-01-31:23:40:01,274 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_recipe", "description": "Search for a recipe by ingredients", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "The ingredients to search for"}}, "required": ["ingredients"]}}}, {"type": "function", "function": {"name": "create_todo", "description": "Create a new todo item", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the todo item"}, "description": {"type": "string", "description": "The description of the todo item"}, "due_date": {"type": "string", "description": "The due date of the todo item"}}, "required": ["title", "description", "due_date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I have some chicken, bell peppers and onions. Can you find me a recipe using these ingredients?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'ingredients': ['chicken', 'bell peppers', 'onions']}, 'name': 'search_recipe'}
</tool_call>
<|im_end|>
2024-01-31:23:40:01,274 INFO     [evaluator.py:113] search_recipe validation: passed
2024-01-31:23:40:01,274 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:01,274 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "ingredients": [
        "chicken",
        "bell peppers",
        "onions"
      ]
    },
    "name": "search_recipe"
  }
]
2024-01-31:23:40:04,444 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_news_feed", "description": "Get the latest news feed", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The category of news, e.g. sports, politics"}}, "required": ["category"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you get me the latest news on politics?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'category': 'politics'}, 'name': 'get_news_feed'}
</tool_call>
<|im_end|>
2024-01-31:23:40:04,444 INFO     [evaluator.py:113] get_news_feed validation: passed
2024-01-31:23:40:04,444 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:04,445 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "category": "politics"
    },
    "name": "get_news_feed"
  }
]
2024-01-31:23:40:07,662 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_movies", "description": "Search for movies based on title, actor, or genre", "parameters": {"type": "object", "properties": {"keyword": {"type": "string", "description": "The keyword to search for in movies"}, "actor": {"type": "string", "description": "The actor's name"}, "genre": {"type": "string", "description": "The genre of the movie"}}, "required": ["keyword"]}}}, {"type": "function", "function": {"name": "calculate_age", "description": "Calculate the age based on birthdate", "parameters": {"type": "object", "properties": {"birthdate": {"type": "string", "description": "The birthdate in yyyy-mm-dd format"}}, "required": ["birthdate"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I want to watch a movie tonight. Can you suggest me some?<|im_end|> 
<|im_start|> assistant
Of course! Could you please provide me with a keyword, an actor's name, or a genre that you're interested in?<|im_end|> 
<|im_start|> user
I am interested in action movies.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'keyword': 'action'}, 'name': 'search_movies'}
</tool_call>
<|im_end|>
2024-01-31:23:40:07,662 INFO     [evaluator.py:113] search_movies validation: passed
2024-01-31:23:40:07,663 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:07,663 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "keyword": "action"
    },
    "name": "search_movies"
  }
]
2024-01-31:23:40:10,738 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_book", "description": "Search for a book by its title or author", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the book"}, "author": {"type": "string", "description": "The author of the book"}}, "required": ["title"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I am looking for a book but I can't remember the full title. It's something like "Pride and..." Can you help me find it?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'title': 'Pride and'}, 'name': 'search_book'}
</tool_call>
<|im_end|>
2024-01-31:23:40:10,738 INFO     [evaluator.py:113] search_book validation: passed
2024-01-31:23:40:10,738 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:10,739 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "title": "Pride and"
    },
    "name": "search_book"
  }
]
2024-01-31:23:40:14,886 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_discount", "description": "Calculate the discount amount", "parameters": {"type": "object", "properties": {"original_price": {"type": "number", "description": "The original price of the item"}, "discount_percentage": {"type": "number", "description": "The percentage of the discount"}}, "required": ["original_price", "discount_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I saw a jacket I liked for $200, but it's on sale for 15% off. How much will the discount be?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'original_price': 200, 'discount_percentage': 15}, 'name': 'calculate_discount'}
</tool_call>
<|im_end|>
2024-01-31:23:40:14,886 INFO     [evaluator.py:113] calculate_discount validation: passed
2024-01-31:23:40:14,887 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:14,887 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "original_price": 200,
      "discount_percentage": 15
    },
    "name": "calculate_discount"
  }
]
2024-01-31:23:40:19,166 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "track_fitness_activity", "description": "Track a fitness activity such as running or cycling", "parameters": {"type": "object", "properties": {"activity": {"type": "string", "description": "The type of fitness activity"}, "distance": {"type": "number", "description": "The distance covered in the activity"}, "duration": {"type": "number", "description": "The duration of the activity in minutes"}}, "required": ["activity", "distance", "duration"]}}}, {"type": "function", "function": {"name": "calculate_distance", "description": "Calculate the distance between two locations", "parameters": {"type": "object", "properties": {"start_location": {"type": "string", "description": "The starting location"}, "end_location": {"type": "string", "description": "The ending location"}}, "required": ["start_location", "end_location"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I just finished a run. Can you help me track it?<|im_end|> 
<|im_start|> assistant
Of course! Could you please provide me with the distance you ran and the duration of your run?<|im_end|> 
<|im_start|> user
I ran 5 kilometers and it took me about 30 minutes.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'activity': 'running', 'distance': 5, 'duration': 30}, 'name': 'track_fitness_activity'}
</tool_call>
<|im_end|>
2024-01-31:23:40:19,167 INFO     [evaluator.py:113] track_fitness_activity validation: passed
2024-01-31:23:40:19,167 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:19,167 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "activity": "running",
      "distance": 5,
      "duration": 30
    },
    "name": "track_fitness_activity"
  }
]
2024-01-31:23:40:26,388 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "analyze_social_media_sentiment", "description": "Analyze the sentiment of social media posts", "parameters": {"type": "object", "properties": {"posts": {"type": "array", "items": {"type": "string"}, "description": "The social media posts to analyze"}, "platform": {"type": "string", "description": "The social media platform to analyze the posts"}}, "required": ["posts"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I have a few posts from Twitter that I want to analyze. Can you help me with that?<|im_end|> 
<|im_start|> assistant
Of course, I can help you analyze the sentiment of your Twitter posts. Please provide me with the posts you want to analyze.<|im_end|> 
<|im_start|> user
Here are the posts: "I love this product!", "This is the worst thing I've ever bought", "I'm so happy with this purchase", "I regret buying this", "This product is amazing".<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'posts': ['I love this product!', 'This is the worst thing I\'ve ever bought', 'I\'m so happy with this purchase', 'I regret buying this', 'This product is amazing'], 'platform': 'Twitter'}, 'name': 'analyze_social_media_sentiment'}
</tool_call>
<|im_end|>
2024-01-31:23:40:26,388 INFO     [evaluator.py:113] analyze_social_media_sentiment validation: passed
2024-01-31:23:40:26,388 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:26,389 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "posts": [
        "I love this product!",
        "This is the worst thing I've ever bought",
        "I'm so happy with this purchase",
        "I regret buying this",
        "This product is amazing"
      ],
      "platform": "Twitter"
    },
    "name": "analyze_social_media_sentiment"
  }
]
2024-01-31:23:40:31,911 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "book_flight", "description": "Book a flight", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "The origin airport code"}, "destination": {"type": "string", "description": "The destination airport code"}, "departure_date": {"type": "string", "description": "The departure date in the format YYYY-MM-DD"}, "return_date": {"type": "string", "description": "The return date in the format YYYY-MM-DD"}}, "required": ["origin", "destination", "departure_date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to book a flight.<|im_end|> 
<|im_start|> assistant
Sure, I can help with that. Could you please provide me with the origin and destination airport codes, as well as the departure date?<|im_end|> 
<|im_start|> user
I want to fly from JFK to LAX on 2022-05-01.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'origin': 'JFK', 'destination': 'LAX', 'departure_date': '2022-05-01'}, 'name': 'book_flight'}
</tool_call>
<|im_end|>
2024-01-31:23:40:31,911 INFO     [evaluator.py:113] book_flight validation: passed
2024-01-31:23:40:31,911 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:31,911 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "origin": "JFK",
      "destination": "LAX",
      "departure_date": "2022-05-01"
    },
    "name": "book_flight"
  }
]
2024-01-31:23:40:36,502 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_fuel_consumption", "description": "Calculate the fuel consumption for a given distance and fuel efficiency", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance traveled"}, "fuel_efficiency": {"type": "number", "description": "The fuel efficiency in miles per gallon"}}, "required": ["distance", "fuel_efficiency"]}}}, {"type": "function", "function": {"name": "get_movie_details", "description": "Get details of a movie", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the movie"}, "year": {"type": "integer", "description": "The release year of the movie"}}, "required": ["title", "year"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I am planning a road trip and I want to calculate how much fuel I will need. I will be traveling 500 miles and my car's fuel efficiency is 25 miles per gallon. Can you help me with this?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'distance': 500, 'fuel_efficiency': 25}, 'name': 'calculate_fuel_consumption'}
</tool_call>
<|im_end|>
2024-01-31:23:40:36,502 INFO     [evaluator.py:113] calculate_fuel_consumption validation: passed
2024-01-31:23:40:36,503 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:36,503 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "distance": 500,
      "fuel_efficiency": 25
    },
    "name": "calculate_fuel_consumption"
  }
]
2024-01-31:23:40:40,643 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_music", "description": "Search for music based on a keyword", "parameters": {"type": "object", "properties": {"keyword": {"type": "string", "description": "The keyword to search for"}, "artist": {"type": "string", "description": "The artist of the music"}, "genre": {"type": "string", "description": "The genre of the music"}}, "required": ["keyword"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, I am looking for some music to listen to. Can you help me find some?<|im_end|> 
<|im_start|> assistant
Of course! I can help you with that. Could you please provide me with a keyword, artist, or genre that you're interested in?<|im_end|> 
<|im_start|> user
I am interested in pop music by Taylor Swift.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'keyword': 'pop', 'artist': 'Taylor Swift'}, 'name': 'search_music'}
</tool_call>
<|im_end|>
2024-01-31:23:40:40,643 INFO     [evaluator.py:113] search_music validation: passed
2024-01-31:23:40:40,643 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:40,644 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "keyword": "pop",
      "artist": "Taylor Swift"
    },
    "name": "search_music"
  }
]
2024-01-31:23:40:44,297 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_news", "description": "Get the latest news", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The news category to filter"}, "country": {"type": "string", "description": "The country code to filter the news"}}}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, can you get me the latest news on technology from the US?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'category': 'technology', 'country': 'US'}, 'name': 'get_news'}
</tool_call>
<|im_end|>
2024-01-31:23:40:44,297 INFO     [evaluator.py:113] get_news validation: passed
2024-01-31:23:40:44,298 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:44,298 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "category": "technology",
      "country": "US"
    },
    "name": "get_news"
  }
]
2024-01-31:23:40:50,302 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_loan_emis", "description": "Calculate monthly loan EMIs (Equated Monthly Installments)", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "number", "description": "The loan amount"}, "interest_rate": {"type": "number", "description": "The annual interest rate"}, "loan_term": {"type": "integer", "description": "The loan term in months"}}, "required": ["loan_amount", "interest_rate", "loan_term"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need some help with calculating my loan EMIs.<|im_end|> 
<|im_start|> assistant
Of course, I can help with that. Could you please provide me with the loan amount, the annual interest rate, and the loan term in months?<|im_end|> 
<|im_start|> user
Sure, the loan amount is $50000, the annual interest rate is 5%, and the loan term is 60 months.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'loan_amount': 50000, 'interest_rate': 5, 'loan_term': 60}, 'name': 'calculate_loan_emis'}
</tool_call>
<|im_end|>
2024-01-31:23:40:50,302 INFO     [evaluator.py:113] calculate_loan_emis validation: passed
2024-01-31:23:40:50,302 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:50,302 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "loan_amount": 50000,
      "interest_rate": 5,
      "loan_term": 60
    },
    "name": "calculate_loan_emis"
  }
]
2024-01-31:23:40:54,998 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_mean", "description": "Calculate the mean of a list of numbers", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers"}}, "required": ["numbers"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I have a list of numbers and I need to find the mean of these numbers. The numbers are 5, 10, 15, 20, 25.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'numbers': [5, 10, 15, 20, 25]}, 'name': 'calculate_mean'}
</tool_call>
<|im_end|>
2024-01-31:23:40:54,998 INFO     [evaluator.py:113] calculate_mean validation: passed
2024-01-31:23:40:54,998 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:40:54,998 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "numbers": [
        5,
        10,
        15,
        20,
        25
      ]
    },
    "name": "calculate_mean"
  }
]
2024-01-31:23:40:59,016 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "track_expenses", "description": "Track personal expenses", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The category of the expense"}, "amount": {"type": "number", "description": "The amount spent"}}, "required": ["category", "amount"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, I just bought a new laptop for $1500. Can you add this to my expenses?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'category': 'Laptop', 'amount': 1500}, 'name': 'track_expenses'}
</tool_call>
<|im_end|>
2024-01-31:23:40:59,017 INFO     [utils.py:114] Expected: Electronics
2024-01-31:23:40:59,017 INFO     [utils.py:115] Got: Laptop
2024-01-31:23:40:59,017 INFO     [evaluator.py:113] track_expenses validation: failed
2024-01-31:23:40:59,017 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:40:59,017 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'category': 'Laptop', 'amount': 1500}, 'name': 'track_expenses'}
</tool_call>

2024-01-31:23:41:03,281 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_tax", "description": "Calculate the tax amount for a given income", "parameters": {"type": "object", "properties": {"income": {"type": "number", "description": "The income amount"}, "tax_percentage": {"type": "number", "description": "The tax percentage"}}, "required": ["income", "tax_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need help with calculating my tax. My income is $50000 and my tax percentage is 20%.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'income': 50000, 'tax_percentage': 20}, 'name': 'calculate_tax'}
</tool_call>
<|im_end|>
2024-01-31:23:41:03,281 INFO     [evaluator.py:113] calculate_tax validation: passed
2024-01-31:23:41:03,281 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:03,281 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "income": 50000,
      "tax_percentage": 20
    },
    "name": "calculate_tax"
  }
]
2024-01-31:23:41:08,634 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "create_task", "description": "Create a new task in a to-do list", "parameters": {"type": "object", "properties": {"task_name": {"type": "string", "description": "The name of the task"}, "due_date": {"type": "string", "description": "The due date of the task"}, "priority": {"type": "string", "description": "The priority of the task"}}, "required": ["task_name", "due_date", "priority"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, can you help me create a new task?<|im_end|> 
<|im_start|> assistant
Of course! I can help you with that. Could you please provide me with the name of the task, its due date, and its priority level?<|im_end|> 
<|im_start|> user
Sure, the task name is "Finish AI project", the due date is "2022-12-31", and the priority is "High".<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'task_name': 'Finish AI project', 'due_date': '2022-12-31', 'priority': 'High'}, 'name': 'create_task'}
</tool_call>
<|im_end|>
2024-01-31:23:41:08,634 INFO     [evaluator.py:113] create_task validation: passed
2024-01-31:23:41:08,635 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:08,635 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "task_name": "Finish AI project",
      "due_date": "2022-12-31",
      "priority": "High"
    },
    "name": "create_task"
  }
]
2024-01-31:23:41:13,441 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "find_largest_number", "description": "Find the largest number in a list", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "items": {"type": "number"}, "description": "The list of numbers"}}, "required": ["numbers"]}}}, {"type": "function", "function": {"name": "convert_temperature", "description": "Convert temperature between Fahrenheit and Celsius", "parameters": {"type": "object", "properties": {"temperature": {"type": "number", "description": "The temperature value to convert"}, "from_unit": {"type": "string", "description": "The unit to convert from (F or C)"}, "to_unit": {"type": "string", "description": "The unit to convert to (F or C)"}}, "required": ["temperature", "from_unit", "to_unit"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I have a list of numbers and I need to find the largest one. The numbers are 5, 7, 2, 9, 1, 6.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'numbers': [5, 7, 2, 9, 1, 6]}, 'name': 'find_largest_number'}
</tool_call>
<|im_end|>
2024-01-31:23:41:13,441 INFO     [evaluator.py:113] find_largest_number validation: passed
2024-01-31:23:41:13,441 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:13,442 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "numbers": [
        5,
        7,
        2,
        9,
        1,
        6
      ]
    },
    "name": "find_largest_number"
  }
]
2024-01-31:23:41:20,448 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "analyze_social_media_sentiment", "description": "Analyze the sentiment of social media posts", "parameters": {"type": "object", "properties": {"posts": {"type": "array", "items": {"type": "string"}, "description": "The social media posts to analyze"}}, "required": ["posts"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I have a list of social media posts that I would like to analyze for sentiment. Can you help me with that?<|im_end|> 
<|im_start|> assistant
Of course, I can help you with that. Please provide me with the social media posts that you would like to analyze.<|im_end|> 
<|im_start|> user
Here are the posts: ["I love this product!", "This is the worst thing I've ever bought", "I'm so happy with this purchase", "I'm not satisfied with this product", "This product is amazing"]<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'posts': ['I love this product!', 'This is the worst thing I\'ve ever bought', 'I\'m so happy with this purchase', 'I\'m not satisfied with this product', 'This product is amazing']}, 'name': 'analyze_social_media_sentiment'}
</tool_call>
<|im_end|>
2024-01-31:23:41:20,448 INFO     [evaluator.py:113] analyze_social_media_sentiment validation: passed
2024-01-31:23:41:20,448 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:20,449 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "posts": [
        "I love this product!",
        "This is the worst thing I've ever bought",
        "I'm so happy with this purchase",
        "I'm not satisfied with this product",
        "This product is amazing"
      ]
    },
    "name": "analyze_social_media_sentiment"
  }
]
2024-01-31:23:41:23,727 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_time_zone", "description": "Get the time zone of a location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location"}}, "required": ["location"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
What's the time zone of New York?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'location': 'New York'}, 'name': 'get_time_zone'}
</tool_call>
<|im_end|>
2024-01-31:23:41:23,727 INFO     [evaluator.py:113] get_time_zone validation: passed
2024-01-31:23:41:23,727 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:23,727 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "location": "New York"
    },
    "name": "get_time_zone"
  }
]
2024-01-31:23:41:29,362 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_rental_income", "description": "Calculate the rental income for a property", "parameters": {"type": "object", "properties": {"rent_per_month": {"type": "number", "description": "The rental amount per month"}, "occupancy_rate": {"type": "number", "description": "The occupancy rate in percentage"}, "total_units": {"type": "integer", "description": "The total number of units in the property"}}, "required": ["rent_per_month", "occupancy_rate", "total_units"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need help with calculating my rental income. I have a property with 10 units. Each unit is rented out for $2000 per month. The occupancy rate is around 80%.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'rent_per_month': 2000, 'occupancy_rate': 80, 'total_units': 10}, 'name': 'calculate_rental_income'}
</tool_call>
<|im_end|>
2024-01-31:23:41:29,362 INFO     [evaluator.py:113] calculate_rental_income validation: passed
2024-01-31:23:41:29,362 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:29,363 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "rent_per_month": 2000,
      "occupancy_rate": 80,
      "total_units": 10
    },
    "name": "calculate_rental_income"
  }
]
2024-01-31:23:41:33,470 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_movie_recommendations", "description": "Get movie recommendations based on user preferences", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "The preferred movie genre"}, "rating": {"type": "number", "description": "The minimum rating of recommended movies"}}, "required": ["genre", "rating"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I'm looking for some good movies to watch. I prefer action movies and they should have a rating of at least 7.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'genre': 'action', 'rating': 7}, 'name': 'get_movie_recommendations'}
</tool_call>
<|im_end|>
2024-01-31:23:41:33,470 INFO     [evaluator.py:113] get_movie_recommendations validation: passed
2024-01-31:23:41:33,470 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:33,470 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "genre": "action",
      "rating": 7
    },
    "name": "get_movie_recommendations"
  }
]
2024-01-31:23:41:40,518 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_news_articles", "description": "Search for news articles based on keywords", "parameters": {"type": "object", "properties": {"keywords": {"type": "array", "items": {"type": "string"}, "description": "The keywords to search for"}, "date_range": {"type": "object", "properties": {"start_date": {"type": "string", "description": "The start date of the news articles. Format would be date."}, "end_date": {"type": "string", "description": "The end date of the news articles. Format would be date."}}}}, "required": ["keywords"]}}}, {"type": "function", "function": {"name": "calculate_age", "description": "Calculate the age based on the birth date", "parameters": {"type": "object", "properties": {"birth_date": {"type": "string", "description": "The birth date in YYYY-MM-DD format"}}, "required": ["birth_date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you find me some news articles about the Mars Rover from the last week?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'keywords': ['Mars', 'Rover'], 'date_range': {'start_date': '2023-04-01', 'end_date': '2023-04-08'}}, 'name': 'search_news_articles'}
</tool_call>
<|im_end|>
2024-01-31:23:41:40,519 INFO     [utils.py:114] Expected: ['Mars Rover']
2024-01-31:23:41:40,519 INFO     [utils.py:115] Got: ['Mars', 'Rover']
2024-01-31:23:41:40,519 INFO     [evaluator.py:113] search_news_articles validation: failed
2024-01-31:23:41:40,519 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:41:40,519 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'keywords': ['Mars', 'Rover'], 'date_range': {'start_date': '2023-04-01', 'end_date': '2023-04-08'}}, 'name': 'search_news_articles'}
</tool_call>

2024-01-31:23:41:43,902 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_stock_price", "description": "Get the current stock price", "parameters": {"type": "object", "properties": {"symbol": {"type": "string", "description": "The symbol of the stock, e.g. AAPL"}}, "required": ["symbol"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, can you tell me the current stock price of Microsoft?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'symbol': 'MSFT'}, 'name': 'get_stock_price'}
</tool_call>
<|im_end|>
2024-01-31:23:41:43,903 INFO     [evaluator.py:113] get_stock_price validation: passed
2024-01-31:23:41:43,903 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:43,903 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "symbol": "MSFT"
    },
    "name": "get_stock_price"
  }
]
2024-01-31:23:41:47,154 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_password", "description": "Generate a random password", "parameters": {"type": "object", "properties": {"length": {"type": "integer", "description": "The length of the password"}}, "required": ["length"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need a new password. Can you generate a random password of 8 characters for me?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'length': 8}, 'name': 'generate_password'}
</tool_call>
<|im_end|>
2024-01-31:23:41:47,154 INFO     [evaluator.py:113] generate_password validation: passed
2024-01-31:23:41:47,154 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:47,154 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "length": 8
    },
    "name": "generate_password"
  }
]
2024-01-31:23:41:53,290 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "create_calendar_event", "description": "Create a new event in the calendar", "parameters": {"type": "object", "properties": {"event_title": {"type": "string", "description": "The title of the event"}, "event_date": {"type": "string", "description": "The date of the event (YYYY-MM-DD)"}, "event_time": {"type": "string", "description": "The time of the event (HH:MM)"}}, "required": ["event_title", "event_date", "event_time"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, I need to schedule a meeting for tomorrow at 10 AM. Can you help me with that?<|im_end|> 
<|im_start|> assistant
Sure, I can help you with that. What would you like to name the event?<|im_end|> 
<|im_start|> user
Let's call it "Team Meeting".<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'event_title': 'Team Meeting', 'event_date': '2023-05-11', 'event_time': '10:00'}, 'name': 'create_calendar_event'}
</tool_call>
<|im_end|>
2024-01-31:23:41:53,290 INFO     [utils.py:114] Expected: 2022-04-15
2024-01-31:23:41:53,290 INFO     [utils.py:115] Got: 2023-05-11
2024-01-31:23:41:53,290 INFO     [evaluator.py:113] create_calendar_event validation: failed
2024-01-31:23:41:53,290 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:41:53,290 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'event_title': 'Team Meeting', 'event_date': '2023-05-11', 'event_time': '10:00'}, 'name': 'create_calendar_event'}
</tool_call>

2024-01-31:23:41:56,454 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_random_fact", "description": "Get a random fact", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The category of the fact, e.g. science, history"}}, "required": ["category"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I'm bored. Can you tell me a random science fact?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'category': 'science'}, 'name': 'get_random_fact'}
</tool_call>
<|im_end|>
2024-01-31:23:41:56,455 INFO     [evaluator.py:113] get_random_fact validation: passed
2024-01-31:23:41:56,455 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:56,455 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "category": "science"
    },
    "name": "get_random_fact"
  }
]
2024-01-31:23:41:59,959 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_user_data", "description": "Get user-specific data", "parameters": {"type": "object", "properties": {"user_id": {"type": "string", "description": "The unique identifier of the user"}}, "required": ["user_id"]}}}, {"type": "function", "function": {"name": "generate_random_color", "description": "Generate a random color", "parameters": {"type": "object", "properties": {}}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to access my data. My user id is 12345.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'user_id': '12345'}, 'name': 'get_user_data'}
</tool_call>
<|im_end|>
2024-01-31:23:41:59,959 INFO     [evaluator.py:113] get_user_data validation: passed
2024-01-31:23:41:59,959 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:41:59,959 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "user_id": "12345"
    },
    "name": "get_user_data"
  }
]
2024-01-31:23:42:04,195 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_discount", "description": "Calculate the discounted price", "parameters": {"type": "object", "properties": {"original_price": {"type": "number", "description": "The original price of the item"}, "discount_percentage": {"type": "number", "description": "The percentage of discount to be applied"}}, "required": ["original_price", "discount_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to calculate the discounted price of a jacket I want to buy. The original price is $200 and the store is offering a 20% discount.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'original_price': 200, 'discount_percentage': 20}, 'name': 'calculate_discount'}
</tool_call>
<|im_end|>
2024-01-31:23:42:04,195 INFO     [evaluator.py:113] calculate_discount validation: passed
2024-01-31:23:42:04,196 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:04,196 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "original_price": 200,
      "discount_percentage": 20
    },
    "name": "calculate_discount"
  }
]
2024-01-31:23:42:08,018 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_fake_data", "description": "Generate fake data for testing purposes", "parameters": {"type": "object", "properties": {"data_type": {"type": "string", "description": "The type of fake data to be generated (e.g. name, address, email)"}, "quantity": {"type": "integer", "description": "The quantity of fake data to be generated"}}, "required": ["data_type", "quantity"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need some fake data for testing my application. Can you generate 50 fake email addresses for me?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'data_type': 'email', 'quantity': 50}, 'name': 'generate_fake_data'}
</tool_call>
<|im_end|>
2024-01-31:23:42:08,019 INFO     [evaluator.py:113] generate_fake_data validation: passed
2024-01-31:23:42:08,019 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:08,019 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "data_type": "email",
      "quantity": 50
    },
    "name": "generate_fake_data"
  }
]
2024-01-31:23:42:12,649 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "convert_currency", "description": "Convert one currency to another", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to convert"}, "from_currency": {"type": "string", "description": "The currency to convert from"}, "to_currency": {"type": "string", "description": "The currency to convert to"}}, "required": ["amount", "from_currency", "to_currency"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I have 1000 Euros and I want to know how much it will be in US dollars.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'amount': 1000, 'from_currency': 'EUR', 'to_currency': 'USD'}, 'name': 'convert_currency'}
</tool_call>
<|im_end|>
2024-01-31:23:42:12,650 INFO     [evaluator.py:113] convert_currency validation: passed
2024-01-31:23:42:12,650 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:12,650 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "amount": 1000,
      "from_currency": "EUR",
      "to_currency": "USD"
    },
    "name": "convert_currency"
  }
]
2024-01-31:23:42:20,741 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_hotels", "description": "Search for hotels based on location and check-in/check-out dates", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The location to search for hotels"}, "check_in_date": {"type": "string", "description": "The check-in date. Format would be date."}, "check_out_date": {"type": "string", "description": "The check-out date. Format would be date."}, "num_rooms": {"type": "integer", "description": "The number of rooms required"}, "num_guests": {"type": "integer", "description": "The number of guests"}}, "required": ["location", "check_in_date", "check_out_date", "num_rooms", "num_guests"]}}}, {"type": "function", "function": {"name": "search_movies", "description": "Search for movies based on given criteria", "parameters": {"type": "object", "properties": {"keywords": {"type": "array", "items": {"type": "string"}, "description": "Keywords to search for in movie titles or genres"}, "release_year": {"type": "integer", "description": "The release year of the movie"}, "minimum_rating": {"type": "number", "description": "The minimum rating of the movie"}}, "required": []}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to find a hotel in New York for my family vacation. We are planning to check-in on 2022-05-01 and check-out on 2022-05-10. We need 2 rooms for 4 guests.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'location': 'New York', 'check_in_date': '2022-05-01', 'check_out_date': '2022-05-10', 'num_rooms': 2, 'num_guests': 4}, 'name': 'search_hotels'}
</tool_call>
<|im_end|>
2024-01-31:23:42:20,741 INFO     [evaluator.py:113] search_hotels validation: passed
2024-01-31:23:42:20,741 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:20,741 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "location": "New York",
      "check_in_date": "2022-05-01",
      "check_out_date": "2022-05-10",
      "num_rooms": 2,
      "num_guests": 4
    },
    "name": "search_hotels"
  }
]
2024-01-31:23:42:25,227 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "analyze_product_reviews", "description": "Analyze the sentiment of product reviews for a specific item", "parameters": {"type": "object", "properties": {"product": {"type": "string", "description": "The product name"}, "num_reviews": {"type": "integer", "description": "The number of reviews to analyze"}}, "required": ["product", "num_reviews"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, can you analyze the reviews for the new iPhone 13? Let's say, the top 50 reviews.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'product': 'iPhone 13', 'num_reviews': 50}, 'name': 'analyze_product_reviews'}
</tool_call>
<|im_end|>
2024-01-31:23:42:25,227 INFO     [evaluator.py:113] analyze_product_reviews validation: passed
2024-01-31:23:42:25,227 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:25,227 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "product": "iPhone 13",
      "num_reviews": 50
    },
    "name": "analyze_product_reviews"
  }
]
2024-01-31:23:42:31,290 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_invoice", "description": "Generate an invoice for a customer", "parameters": {"type": "object", "properties": {"customer_id": {"type": "string", "description": "The ID of the customer"}, "amount": {"type": "number", "description": "The amount to be invoiced"}, "due_date": {"type": "string", "description": "The due date of the invoice. Format would be date."}}, "required": ["customer_id", "amount", "due_date"]}}}, {"type": "function", "function": {"name": "calculate_age", "description": "Calculate the age based on birth date", "parameters": {"type": "object", "properties": {"birth_date": {"type": "string", "description": "The birth date"}}, "required": ["birth_date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I need to generate an invoice for customer ID 12345. The amount is $500 and the due date is 2022-05-01.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'customer_id': '12345', 'amount': 500, 'due_date': '2022-05-01'}, 'name': 'generate_invoice'}
</tool_call>
<|im_end|>
2024-01-31:23:42:31,290 INFO     [evaluator.py:113] generate_invoice validation: passed
2024-01-31:23:42:31,291 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:31,291 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "customer_id": "12345",
      "amount": 500,
      "due_date": "2022-05-01"
    },
    "name": "generate_invoice"
  }
]
2024-01-31:23:42:35,712 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_movies", "description": "Search for movies", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The movie search query"}, "genre": {"type": "string", "description": "The genre of the movie"}, "year": {"type": "integer", "description": "The release year of the movie"}}}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I am looking for a comedy movie released in 2015. Can you help me find one?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'query': '', 'genre': 'Comedy', 'year': 2015}, 'name': 'search_movies'}
</tool_call>
<|im_end|>
2024-01-31:23:42:35,713 INFO     [utils.py:114] Expected: comedy
2024-01-31:23:42:35,713 INFO     [utils.py:115] Got: Comedy
2024-01-31:23:42:35,713 INFO     [evaluator.py:113] search_movies validation: failed
2024-01-31:23:42:35,713 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:42:35,713 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'query': '', 'genre': 'Comedy', 'year': 2015}, 'name': 'search_movies'}
</tool_call>

2024-01-31:23:42:40,785 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "capture_screenshot", "description": "Capture a screenshot of a webpage", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "URL of the webpage to capture"}, "width": {"type": "integer", "description": "Width of the screenshot"}, "height": {"type": "integer", "description": "Height of the screenshot"}}, "required": ["url", "width", "height"]}}}, {"type": "function", "function": {"name": "get_current_time", "description": "Get the current time of a specific location", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and country, e.g. London, UK"}}, "required": ["location"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, I need a screenshot of a webpage.<|im_end|> 
<|im_start|> assistant
Sure, I can help with that. Could you please provide me with the URL of the webpage and the desired width and height for the screenshot?<|im_end|> 
<|im_start|> user
The URL is www.example.com and I want the screenshot to be 1024 pixels wide and 768 pixels high.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'url': 'www.example.com', 'width': 1024, 'height': 768}, 'name': 'capture_screenshot'}
</tool_call>
<|im_end|>
2024-01-31:23:42:40,786 INFO     [evaluator.py:113] capture_screenshot validation: passed
2024-01-31:23:42:40,786 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:40,786 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "url": "www.example.com",
      "width": 1024,
      "height": 768
    },
    "name": "capture_screenshot"
  }
]
2024-01-31:23:42:45,780 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "analyze_social_media_sentiment", "description": "Analyze the sentiment of social media posts", "parameters": {"type": "object", "properties": {"username": {"type": "string", "description": "The username of the social media account"}, "platform": {"type": "string", "description": "The social media platform (Twitter, Instagram)"}, "num_posts": {"type": "integer", "description": "The number of posts to analyze"}}, "required": ["username", "platform", "num_posts"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I would like to know the sentiment of the last 10 posts of the user @JohnDoe on Twitter.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'username': 'JohnDoe', 'platform': 'Twitter', 'num_posts': 10}, 'name': 'analyze_social_media_sentiment'}
</tool_call>
<|im_end|>
2024-01-31:23:42:45,781 INFO     [utils.py:114] Expected: @JohnDoe
2024-01-31:23:42:45,781 INFO     [utils.py:115] Got: JohnDoe
2024-01-31:23:42:45,781 INFO     [evaluator.py:113] analyze_social_media_sentiment validation: failed
2024-01-31:23:42:45,781 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:42:45,781 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'username': 'JohnDoe', 'platform': 'Twitter', 'num_posts': 10}, 'name': 'analyze_social_media_sentiment'}
</tool_call>

2024-01-31:23:42:48,707 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_next_holiday", "description": "Get the date of the next holiday", "parameters": {"type": "object", "properties": {}}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
When is the next holiday?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {}, 'name': 'get_next_holiday'}
</tool_call>
<|im_end|>
2024-01-31:23:42:48,708 INFO     [evaluator.py:113] get_next_holiday validation: passed
2024-01-31:23:42:48,708 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:48,708 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {},
    "name": "get_next_holiday"
  }
]
2024-01-31:23:42:55,036 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "translate_text", "description": "Translate text from one language to another", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text to translate"}, "source_language": {"type": "string", "description": "The source language of the text"}, "target_language": {"type": "string", "description": "The target language to translate the text into"}}, "required": ["text", "source_language", "target_language"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I have a paragraph in French that I need to translate into English. Can you help me with that?<|im_end|> 
<|im_start|> assistant
Of course, I can help with that. Please provide me with the French text that you want to translate.<|im_end|> 
<|im_start|> user
Sure, here it is - "Bonjour, comment ça va? J'espère que vous passez une bonne journée."<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'text': 'Bonjour, comment ça va? J\'espère que vous passez une bonne journée.', 'source_language': 'fr', 'target_language': 'en'}, 'name': 'translate_text'}
</tool_call>
<|im_end|>
2024-01-31:23:42:55,036 INFO     [evaluator.py:113] translate_text validation: passed
2024-01-31:23:42:55,036 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:55,037 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "text": "Bonjour, comment \u00e7a va? J'esp\u00e8re que vous passez une bonne journ\u00e9e.",
      "source_language": "fr",
      "target_language": "en"
    },
    "name": "translate_text"
  }
]
2024-01-31:23:42:59,697 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_interest", "description": "Calculate the interest amount based on principal, rate, and time", "parameters": {"type": "object", "properties": {"principal": {"type": "number", "description": "The principal amount"}, "rate": {"type": "number", "description": "The interest rate in percentage"}, "time": {"type": "number", "description": "The time period in years"}}, "required": ["principal", "rate", "time"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need help with calculating the interest on my savings. I have $5000 in my account and the interest rate is 2% per annum. I plan to keep the money in for 3 years. Can you help me calculate the interest?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'principal': 5000, 'rate': 2, 'time': 3}, 'name': 'calculate_interest'}
</tool_call>
<|im_end|>
2024-01-31:23:42:59,697 INFO     [evaluator.py:113] calculate_interest validation: passed
2024-01-31:23:42:59,697 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:42:59,697 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "principal": 5000,
      "rate": 2,
      "time": 3
    },
    "name": "calculate_interest"
  }
]
2024-01-31:23:43:03,333 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "detect_language", "description": "Detect the language of a given text", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text to analyze"}}, "required": ["text"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, can you help me identify the language of this text - "Je suis un étudiant"?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'text': 'Je suis un étudiant'}, 'name': 'detect_language'}
</tool_call>
<|im_end|>
2024-01-31:23:43:03,333 INFO     [evaluator.py:113] detect_language validation: passed
2024-01-31:23:43:03,333 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:03,333 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "text": "Je suis un \u00e9tudiant"
    },
    "name": "detect_language"
  }
]
2024-01-31:23:43:08,077 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_calories_burned", "description": "Calculate the calories burned during physical activity", "parameters": {"type": "object", "properties": {"activity": {"type": "string", "description": "The type of physical activity"}, "duration": {"type": "integer", "description": "The duration of the activity in minutes"}, "weight": {"type": "number", "description": "The weight of the person in kilograms"}}, "required": ["activity", "duration", "weight"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I just finished a 45 minutes jogging session. I weigh 70 kilograms. Can you tell me how many calories I burned?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'activity': 'jogging', 'duration': 45, 'weight': 70}, 'name': 'calculate_calories_burned'}
</tool_call>
<|im_end|>
2024-01-31:23:43:08,077 INFO     [evaluator.py:113] calculate_calories_burned validation: passed
2024-01-31:23:43:08,077 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:08,077 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "activity": "jogging",
      "duration": 45,
      "weight": 70
    },
    "name": "calculate_calories_burned"
  }
]
2024-01-31:23:43:11,763 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_news", "description": "Get the latest news articles", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The category of news articles (e.g. sports, politics)"}, "country": {"type": "string", "description": "The country for which the news articles should be retrieved"}}, "required": ["category", "country"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I would like to know the latest news in sports from the United States.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'category': 'sports', 'country': 'United States'}, 'name': 'get_news'}
</tool_call>
<|im_end|>
2024-01-31:23:43:11,763 INFO     [evaluator.py:113] get_news validation: passed
2024-01-31:23:43:11,763 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:11,763 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "category": "sports",
      "country": "United States"
    },
    "name": "get_news"
  }
]
2024-01-31:23:43:18,526 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "create_calendar_event", "description": "Create a calendar event", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the event"}, "event_date": {"type": "string", "description": "The date of the event"}, "event_time": {"type": "string", "description": "The time of the event"}, "event_location": {"type": "string", "description": "The location of the event"}}, "required": ["event_name", "event_date", "event_time", "event_location"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I need to create a calendar event for my meeting next week.<|im_end|> 
<|im_start|> assistant
Sure, I can help with that. Could you please provide me with the name of the event, the date and time, and the location?<|im_end|> 
<|im_start|> user
The event is called "Project Planning Meeting". It's on the 15th of next month at 10 AM. The location is the conference room in our office.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'event_name': 'Project Planning Meeting', 'event_date': '2023-04-15', 'event_time': '10:00', 'event_location': 'Conference Room, Office'}, 'name': 'create_calendar_event'}
</tool_call>
<|im_end|>
2024-01-31:23:43:18,526 INFO     [utils.py:114] Expected: 15th of next month
2024-01-31:23:43:18,526 INFO     [utils.py:115] Got: 2023-04-15
2024-01-31:23:43:18,527 INFO     [evaluator.py:113] create_calendar_event validation: failed
2024-01-31:23:43:18,527 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:43:18,527 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'event_name': 'Project Planning Meeting', 'event_date': '2023-04-15', 'event_time': '10:00', 'event_location': 'Conference Room, Office'}, 'name': 'create_calendar_event'}
</tool_call>

2024-01-31:23:43:21,856 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "check_prime_number", "description": "Check if a number is prime", "parameters": {"type": "object", "properties": {"number": {"type": "integer", "description": "The number to check"}}, "required": ["number"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to check if a number is prime. Can you help me with that?<|im_end|> 
<|im_start|> assistant
Of course! Please provide me with the number you want to check.<|im_end|> 
<|im_start|> user
The number is 17.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'number': 17}, 'name': 'check_prime_number'}
</tool_call>
<|im_end|>
2024-01-31:23:43:21,856 INFO     [evaluator.py:113] check_prime_number validation: passed
2024-01-31:23:43:21,856 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:21,856 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "number": 17
    },
    "name": "check_prime_number"
  }
]
2024-01-31:23:43:24,627 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_current_date", "description": "Get the current date", "parameters": {"type": "object", "properties": {}}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, can you tell me what's the date today?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {}, 'name': 'get_current_date'}
</tool_call>
<|im_end|>
2024-01-31:23:43:24,627 INFO     [evaluator.py:113] get_current_date validation: passed
2024-01-31:23:43:24,627 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:24,628 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {},
    "name": "get_current_date"
  }
]
2024-01-31:23:43:29,668 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_route", "description": "Calculate the optimal route between multiple locations", "parameters": {"type": "object", "properties": {"locations": {"type": "array", "items": {"type": "string"}, "description": "The locations to visit in order"}, "travel_mode": {"type": "string", "description": "The travel mode (e.g. driving, walking)"}}, "required": ["locations"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to travel from my home in Brooklyn to my office in Manhattan, then to a restaurant in Queens for lunch, and finally back home. Can you help me find the best route if I'm driving?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'locations': ['Brooklyn', 'Manhattan', 'Queens', 'Brooklyn'], 'travel_mode': 'driving'}, 'name': 'calculate_route'}
</tool_call>
<|im_end|>
2024-01-31:23:43:29,668 INFO     [evaluator.py:113] calculate_route validation: passed
2024-01-31:23:43:29,668 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:29,669 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "locations": [
        "Brooklyn",
        "Manhattan",
        "Queens",
        "Brooklyn"
      ],
      "travel_mode": "driving"
    },
    "name": "calculate_route"
  }
]
2024-01-31:23:43:32,970 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "scan_barcode", "description": "Scan a barcode and retrieve information", "parameters": {"type": "object", "properties": {"image": {"type": "string", "description": "The image of the barcode"}}, "required": ["image"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I have a barcode that I need to scan. Can you help me with that?<|im_end|> 
<|im_start|> assistant
Of course, I can help you with that. Please provide the image of the barcode.<|im_end|> 
<|im_start|> user
Here it is. [User sends image]<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'image': 'image_url'}, 'name': 'scan_barcode'}
</tool_call>
<|im_end|>
2024-01-31:23:43:32,970 INFO     [utils.py:114] Expected: user_image
2024-01-31:23:43:32,970 INFO     [utils.py:115] Got: image_url
2024-01-31:23:43:32,970 INFO     [evaluator.py:113] scan_barcode validation: failed
2024-01-31:23:43:32,970 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:43:32,970 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'image': 'image_url'}, 'name': 'scan_barcode'}
</tool_call>

2024-01-31:23:43:37,108 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_tip", "description": "Calculate the tip amount for a given bill", "parameters": {"type": "object", "properties": {"bill_amount": {"type": "number", "description": "The total bill amount"}, "tip_percentage": {"type": "number", "description": "The percentage of tip to be given"}}, "required": ["bill_amount", "tip_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need help with calculating a tip. My bill amount is $85 and I want to give a 15% tip.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'bill_amount': 85, 'tip_percentage': 15}, 'name': 'calculate_tip'}
</tool_call>
<|im_end|>
2024-01-31:23:43:37,108 INFO     [evaluator.py:113] calculate_tip validation: passed
2024-01-31:23:43:37,108 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:37,108 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "bill_amount": 85,
      "tip_percentage": 15
    },
    "name": "calculate_tip"
  }
]
2024-01-31:23:43:41,219 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "analyze_sentiment", "description": "Analyze the sentiment of a given text", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text to analyze"}}, "required": ["text"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, can you help me understand the sentiment of this text? "I am feeling really down today. Nothing seems to be going right."<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'text': 'I am feeling really down today. Nothing seems to be going right.'}, 'name': 'analyze_sentiment'}
</tool_call>
<|im_end|>
2024-01-31:23:43:41,220 INFO     [evaluator.py:113] analyze_sentiment validation: passed
2024-01-31:23:43:41,220 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:41,220 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "text": "I am feeling really down today. Nothing seems to be going right."
    },
    "name": "analyze_sentiment"
  }
]
2024-01-31:23:43:46,705 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_loan_payment", "description": "Calculate the monthly payment for a loan", "parameters": {"type": "object", "properties": {"loan_amount": {"type": "number", "description": "The total loan amount"}, "interest_rate": {"type": "number", "description": "The annual interest rate"}, "loan_term": {"type": "integer", "description": "The loan term in months"}}, "required": ["loan_amount", "interest_rate", "loan_term"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need some help with my loan calculations.<|im_end|> 
<|im_start|> assistant
Of course, I'd be happy to help you with that. Could you please provide me with the total loan amount, the annual interest rate, and the loan term in months?<|im_end|> 
<|im_start|> user
Sure, the loan amount is $50000, the interest rate is 5% annually, and the loan term is 60 months.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'loan_amount': 50000, 'interest_rate': 5, 'loan_term': 60}, 'name': 'calculate_loan_payment'}
</tool_call>
<|im_end|>
2024-01-31:23:43:46,705 INFO     [evaluator.py:113] calculate_loan_payment validation: passed
2024-01-31:23:43:46,705 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:46,705 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "loan_amount": 50000,
      "interest_rate": 5,
      "loan_term": 60
    },
    "name": "calculate_loan_payment"
  }
]
2024-01-31:23:43:51,276 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "track_calories", "description": "Track daily calorie intake", "parameters": {"type": "object", "properties": {"meal": {"type": "string", "description": "The meal for which calories are being tracked"}, "calories": {"type": "number", "description": "The number of calories consumed"}, "date": {"type": "string", "description": "The date for which calories are being tracked. Format would be date."}}, "required": ["meal", "calories", "date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I had a pizza for lunch today which was about 800 calories. Can you track this for me?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'meal': 'lunch', 'calories': 800, 'date': 'today'}, 'name': 'track_calories'}
</tool_call>
<|im_end|>
2024-01-31:23:43:51,276 INFO     [utils.py:114] Expected: pizza
2024-01-31:23:43:51,276 INFO     [utils.py:115] Got: lunch
2024-01-31:23:43:51,276 INFO     [evaluator.py:113] track_calories validation: failed
2024-01-31:23:43:51,276 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:43:51,276 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'meal': 'lunch', 'calories': 800, 'date': 'today'}, 'name': 'track_calories'}
</tool_call>

2024-01-31:23:43:54,563 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_movie", "description": "Search for a movie by title", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the movie"}}, "required": ["title"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you find the movie "Inception"?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'title': 'Inception'}, 'name': 'search_movie'}
</tool_call>
<|im_end|>
2024-01-31:23:43:54,564 INFO     [evaluator.py:113] search_movie validation: passed
2024-01-31:23:43:54,564 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:54,564 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "title": "Inception"
    },
    "name": "search_movie"
  }
]
2024-01-31:23:43:58,848 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_discount", "description": "Calculate the discounted price of a product", "parameters": {"type": "object", "properties": {"original_price": {"type": "number", "description": "The original price of the product"}, "discount_percentage": {"type": "number", "description": "The percentage discount to be applied"}}, "required": ["original_price", "discount_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to calculate the discounted price of a product. The original price is $100 and the discount is 20%.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'original_price': 100, 'discount_percentage': 20}, 'name': 'calculate_discount'}
</tool_call>
<|im_end|>
2024-01-31:23:43:58,849 INFO     [evaluator.py:113] calculate_discount validation: passed
2024-01-31:23:43:58,849 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:43:58,849 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "original_price": 100,
      "discount_percentage": 20
    },
    "name": "calculate_discount"
  }
]
2024-01-31:23:44:03,182 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "perform_spell_check", "description": "Perform a spell check on a given text", "parameters": {"type": "object", "properties": {"text": {"type": "string", "description": "The text to be spell checked"}, "language": {"type": "string", "description": "The language of the text"}}, "required": ["text"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I have written a paragraph for my English assignment. Can you check it for spelling errors?<|im_end|> 
<|im_start|> assistant
Of course, I'd be happy to help. Please share the paragraph you've written.<|im_end|> 
<|im_start|> user
Here it is - "The quik brown fox jumps over the lazy dog."<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'text': 'The quik brown fox jumps over the lazy dog.', 'language': 'en'}, 'name': 'perform_spell_check'}
</tool_call>
<|im_end|>
2024-01-31:23:44:03,182 INFO     [utils.py:114] Expected: English
2024-01-31:23:44:03,182 INFO     [utils.py:115] Got: en
2024-01-31:23:44:03,182 INFO     [evaluator.py:113] perform_spell_check validation: failed
2024-01-31:23:44:03,182 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:44:03,182 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'text': 'The quik brown fox jumps over the lazy dog.', 'language': 'en'}, 'name': 'perform_spell_check'}
</tool_call>

2024-01-31:23:44:05,867 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_random_fact", "description": "Generate a random fun fact", "parameters": {"type": "object", "properties": {}}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I'm bored. Can you tell me a fun fact?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {}, 'name': 'generate_random_fact'}
</tool_call>
<|im_end|>
2024-01-31:23:44:05,868 INFO     [evaluator.py:113] generate_random_fact validation: passed
2024-01-31:23:44:05,868 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:44:05,868 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {},
    "name": "generate_random_fact"
  }
]
2024-01-31:23:44:11,749 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_invoice", "description": "Generate an invoice for a customer", "parameters": {"type": "object", "properties": {"customer_name": {"type": "string", "description": "The name of the customer"}, "order_items": {"type": "array", "items": {"type": "object", "properties": {"product_name": {"type": "string", "description": "The name of the product"}, "quantity": {"type": "integer", "description": "The quantity of the product"}, "price": {"type": "number", "description": "The price of the product"}}, "required": ["product_name", "quantity", "price"]}, "description": "The items included in the order"}}, "required": ["customer_name", "order_items"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you generate an invoice for John Doe who ordered 2 laptops each costing $1000?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'customer_name': 'John Doe', 'order_items': [{'product_name': 'Laptop', 'quantity': 2, 'price': 1000}]}, 'name': 'generate_invoice'}
</tool_call>
<|im_end|>
2024-01-31:23:44:11,750 INFO     [utils.py:114] Expected: [{'product_name': 'laptop', 'quantity': 2, 'price': 1000}]
2024-01-31:23:44:11,750 INFO     [utils.py:115] Got: [{'product_name': 'Laptop', 'quantity': 2, 'price': 1000}]
2024-01-31:23:44:11,750 INFO     [evaluator.py:113] generate_invoice validation: failed
2024-01-31:23:44:11,750 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:44:11,750 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'customer_name': 'John Doe', 'order_items': [{'product_name': 'Laptop', 'quantity': 2, 'price': 1000}]}, 'name': 'generate_invoice'}
</tool_call>

2024-01-31:23:44:15,645 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_stock_price", "description": "Get the current stock price for a given company", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The name of the company"}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed"}}, "required": ["company", "exchange"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, can you tell me the current stock price of Apple on NASDAQ?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'company': 'Apple', 'exchange': 'NASDAQ'}, 'name': 'get_stock_price'}
</tool_call>
<|im_end|>
2024-01-31:23:44:15,645 INFO     [evaluator.py:113] get_stock_price validation: passed
2024-01-31:23:44:15,645 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:44:15,645 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "company": "Apple",
      "exchange": "NASDAQ"
    },
    "name": "get_stock_price"
  }
]
2024-01-31:23:44:21,780 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_qr_code", "description": "Generate a QR code", "parameters": {"type": "object", "properties": {"data": {"type": "string", "description": "The data to be encoded in the QR code"}, "size": {"type": "integer", "description": "The size of the QR code"}, "background_color": {"type": "string", "description": "The background color of the QR code"}, "foreground_color": {"type": "string", "description": "The foreground color of the QR code"}}, "required": ["data", "size", "background_color", "foreground_color"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I need a QR code for my website. The website URL is www.mywebsite.com. I want the QR code to be 500 in size, with a white background and black foreground.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'data': 'www.mywebsite.com', 'size': 500, 'background_color': '#FFFFFF', 'foreground_color': '#000000'}, 'name': 'generate_qr_code'}
</tool_call>
<|im_end|>
2024-01-31:23:44:21,780 INFO     [utils.py:114] Expected: white
2024-01-31:23:44:21,780 INFO     [utils.py:115] Got: #FFFFFF
2024-01-31:23:44:21,780 INFO     [evaluator.py:113] generate_qr_code validation: failed
2024-01-31:23:44:21,780 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:44:21,780 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'data': 'www.mywebsite.com', 'size': 500, 'background_color': '#FFFFFF', 'foreground_color': '#000000'}, 'name': 'generate_qr_code'}
</tool_call>

2024-01-31:23:44:29,278 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_invoice", "description": "Generate an invoice for a customer", "parameters": {"type": "object", "properties": {"customer_name": {"type": "string", "description": "The name of the customer"}, "items": {"type": "array", "items": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the item"}, "price": {"type": "number", "description": "The price of the item"}, "quantity": {"type": "integer", "description": "The quantity of the item"}}, "required": ["name", "price", "quantity"]}}}, "required": ["customer_name", "items"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you generate an invoice for John Doe for 2 apples and 3 oranges?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'customer_name': 'John Doe', 'items': [{'name': 'Apple', 'price': 1.99, 'quantity': 2}, {'name': 'Orange', 'price': 0.99, 'quantity': 3}]}, 'name': 'generate_invoice'}
</tool_call>
<|im_end|>
2024-01-31:23:44:29,278 INFO     [utils.py:114] Expected: [{'name': 'apple', 'price': 0.5, 'quantity': 2}, {'name': 'orange', 'price': 0.75, 'quantity': 3}]
2024-01-31:23:44:29,279 INFO     [utils.py:115] Got: [{'name': 'Apple', 'price': 1.99, 'quantity': 2}, {'name': 'Orange', 'price': 0.99, 'quantity': 3}]
2024-01-31:23:44:29,279 INFO     [evaluator.py:113] generate_invoice validation: failed
2024-01-31:23:44:29,279 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:44:29,279 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'customer_name': 'John Doe', 'items': [{'name': 'Apple', 'price': 1.99, 'quantity': 2}, {'name': 'Orange', 'price': 0.99, 'quantity': 3}]}, 'name': 'generate_invoice'}
</tool_call>

2024-01-31:23:44:32,677 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_stock_prices", "description": "Get the current stock prices of a company", "parameters": {"type": "object", "properties": {"company": {"type": "string", "description": "The name of the company"}}, "required": ["company"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you tell me the current stock price of Apple?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'company': 'Apple'}, 'name': 'get_stock_prices'}
</tool_call>
<|im_end|>
2024-01-31:23:44:32,677 INFO     [evaluator.py:113] get_stock_prices validation: passed
2024-01-31:23:44:32,677 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:44:32,677 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "company": "Apple"
    },
    "name": "get_stock_prices"
  }
]
2024-01-31:23:44:37,137 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "convert_currency", "description": "Convert one currency to another", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to convert"}, "from": {"type": "string", "description": "The currency to convert from"}, "to": {"type": "string", "description": "The currency to convert to"}}, "required": ["amount", "from", "to"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to convert 100 USD to EUR. Can you help me with that?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'amount': 100, 'from': 'USD', 'to': 'EUR'}, 'name': 'convert_currency'}
</tool_call>
<|im_end|>
2024-01-31:23:44:37,137 INFO     [evaluator.py:113] convert_currency validation: passed
2024-01-31:23:44:37,137 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:44:37,137 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "amount": 100,
      "from": "USD",
      "to": "EUR"
    },
    "name": "convert_currency"
  }
]
2024-01-31:23:44:40,860 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_stock_price", "description": "Get the current stock price of a company", "parameters": {"type": "object", "properties": {"company_name": {"type": "string", "description": "The name of the company"}}, "required": ["company_name"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, can you tell me the current stock price of Apple Inc.?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'company_name': 'Apple Inc.'}, 'name': 'get_stock_price'}
</tool_call>
<|im_end|>
2024-01-31:23:44:40,860 INFO     [evaluator.py:113] get_stock_price validation: passed
2024-01-31:23:44:40,860 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:44:40,860 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "company_name": "Apple Inc."
    },
    "name": "get_stock_price"
  }
]
2024-01-31:23:44:45,186 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "add_to_shopping_list", "description": "Add an item to the shopping list", "parameters": {"type": "object", "properties": {"item": {"type": "string", "description": "The item to be added"}, "quantity": {"type": "integer", "description": "The quantity of the item"}}, "required": ["item", "quantity"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I need to add apples to my shopping list. I need 5 of them.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'item': 'apples', 'quantity': 5}, 'name': 'add_to_shopping_list'}
</tool_call>
<|im_end|>
2024-01-31:23:44:45,187 INFO     [evaluator.py:113] add_to_shopping_list validation: passed
2024-01-31:23:44:45,187 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:44:45,187 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "item": "apples",
      "quantity": 5
    },
    "name": "add_to_shopping_list"
  }
]
2024-01-31:23:44:51,576 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "create_event", "description": "Create a new event", "parameters": {"type": "object", "properties": {"event_name": {"type": "string", "description": "The name of the event"}, "start_date": {"type": "string", "description": "The start date of the event"}, "end_date": {"type": "string", "description": "The end date of the event"}}, "required": ["event_name", "start_date", "end_date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I need to create an event called "Summer Festival". It should start on 1st June and end on 10th June.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'event_name': 'Summer Festival', 'start_date': '2023-06-01', 'end_date': '2023-06-10'}, 'name': 'create_event'}
</tool_call>
<|im_end|>
2024-01-31:23:44:51,577 INFO     [utils.py:114] Expected: 1st June
2024-01-31:23:44:51,577 INFO     [utils.py:115] Got: 2023-06-01
2024-01-31:23:44:51,577 INFO     [evaluator.py:113] create_event validation: failed
2024-01-31:23:44:51,577 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:44:51,577 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'event_name': 'Summer Festival', 'start_date': '2023-06-01', 'end_date': '2023-06-10'}, 'name': 'create_event'}
</tool_call>

2024-01-31:23:44:59,814 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_gpa", "description": "Calculate the Grade Point Average (GPA)", "parameters": {"type": "object", "properties": {"grades": {"type": "array", "items": {"type": "object", "properties": {"course": {"type": "string", "description": "The name of the course"}, "grade": {"type": "string", "description": "The grade obtained in the course"}, "credits": {"type": "number", "description": "The number of credits for the course"}}, "required": ["course", "grade", "credits"]}}}, "required": ["grades"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Can you calculate my GPA for this semester? I have the grades for my courses.<|im_end|> 
<|im_start|> assistant
Sure, I can help with that. Please provide me with the name of each course, the grade you obtained, and the number of credits for the course.<|im_end|> 
<|im_start|> user
Okay, here they are. I took Mathematics and got an A, it was a 3 credit course. Then I took English and got a B, it was a 4 credit course. Lastly, I took History and got a C, it was a 3 credit course.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'grades': [{'course': 'Mathematics', 'grade': 'A', 'credits': 3}, {'course': 'English', 'grade': 'B', 'credits': 4}, {'course': 'History', 'grade': 'C', 'credits': 3}]}, 'name': 'calculate_gpa'}
</tool_call>
<|im_end|>
2024-01-31:23:44:59,814 INFO     [evaluator.py:113] calculate_gpa validation: passed
2024-01-31:23:44:59,814 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:44:59,814 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "grades": [
        {
          "course": "Mathematics",
          "grade": "A",
          "credits": 3
        },
        {
          "course": "English",
          "grade": "B",
          "credits": 4
        },
        {
          "course": "History",
          "grade": "C",
          "credits": 3
        }
      ]
    },
    "name": "calculate_gpa"
  }
]
2024-01-31:23:45:04,242 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_discount", "description": "Calculate the final price after applying a discount", "parameters": {"type": "object", "properties": {"original_price": {"type": "number", "description": "The original price of the item"}, "discount_percentage": {"type": "number", "description": "The percentage discount to be applied"}}, "required": ["original_price", "discount_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I saw a dress that I liked in a store. It was priced at $200 but they are offering a 20% discount. Can you tell me how much I will have to pay if I buy it?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'original_price': 200, 'discount_percentage': 20}, 'name': 'calculate_discount'}
</tool_call>
<|im_end|>
2024-01-31:23:45:04,243 INFO     [evaluator.py:113] calculate_discount validation: passed
2024-01-31:23:45:04,243 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:04,243 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "original_price": 200,
      "discount_percentage": 20
    },
    "name": "calculate_discount"
  }
]
2024-01-31:23:45:08,043 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_percentage", "description": "Calculate the percentage of a value", "parameters": {"type": "object", "properties": {"value": {"type": "number", "description": "The value to calculate the percentage of"}, "total": {"type": "number", "description": "The total value"}}, "required": ["value", "total"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to calculate the percentage of a value. I scored 85 out of 100 in my test. Can you help me with that?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'value': 85, 'total': 100}, 'name': 'calculate_percentage'}
</tool_call>
<|im_end|>
2024-01-31:23:45:08,043 INFO     [evaluator.py:113] calculate_percentage validation: passed
2024-01-31:23:45:08,043 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:08,043 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "value": 85,
      "total": 100
    },
    "name": "calculate_percentage"
  }
]
2024-01-31:23:45:12,843 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_currency_conversion_rate", "description": "Get the conversion rate between two currencies", "parameters": {"type": "object", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from"}, "target_currency": {"type": "string", "description": "The currency to convert to"}, "amount": {"type": "number", "description": "The amount to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}}, {"type": "function", "function": {"name": "convert_currency", "description": "Convert one currency to another", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to be converted"}, "source_currency": {"type": "string", "description": "The source currency"}, "target_currency": {"type": "string", "description": "The target currency"}}, "required": ["amount", "source_currency", "target_currency"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to convert 1000 USD to Euros. Can you help me with that?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'amount': 1000, 'source_currency': 'USD', 'target_currency': 'EUR'}, 'name': 'convert_currency'}
</tool_call>
<|im_end|>
2024-01-31:23:45:12,844 INFO     [evaluator.py:118] Function 'get_currency_conversion_rate' not found
2024-01-31:23:45:12,844 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:45:12,844 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'amount': 1000, 'source_currency': 'USD', 'target_currency': 'EUR'}, 'name': 'convert_currency'}
</tool_call>

2024-01-31:23:45:16,895 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_age", "description": "Calculate the age based on birth date", "parameters": {"type": "object", "properties": {"birth_date": {"type": "string", "description": "The birth date"}}, "required": ["birth_date"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I was wondering if you could help me with something.<|im_end|> 
<|im_start|> assistant
Of course! I'm here to help. What do you need assistance with?<|im_end|> 
<|im_start|> user
I need to know how old someone is if they were born on 15th August, 1990.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'birth_date': '1990-08-15'}, 'name': 'calculate_age'}
</tool_call>
<|im_end|>
2024-01-31:23:45:16,895 INFO     [evaluator.py:113] calculate_age validation: passed
2024-01-31:23:45:16,895 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:16,895 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "birth_date": "1990-08-15"
    },
    "name": "calculate_age"
  }
]
2024-01-31:23:45:25,199 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "create_calendar_event", "description": "Create a new event in the calendar", "parameters": {"type": "object", "properties": {"title": {"type": "string", "description": "The title of the event"}, "start_time": {"type": "string", "description": "The start time of the event in ISO 8601 format. Format would be date-time."}, "end_time": {"type": "string", "description": "The end time of the event in ISO 8601 format. Format would be date-time."}, "location": {"type": "string", "description": "The location of the event"}}, "required": ["title", "start_time", "end_time"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to create an event in my calendar for a meeting next week.<|im_end|> 
<|im_start|> assistant
Sure, I can help with that. Could you please provide me with the title, start time, end time, and location of the meeting?<|im_end|> 
<|im_start|> user
The meeting is titled "Project Discussion", it starts at 2022-04-15T10:00:00Z and ends at 2022-04-15T12:00:00Z. The location is our main office.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'title': 'Project Discussion', 'start_time': '2022-04-15T10:00:00Z', 'end_time': '2022-04-15T12:00:00Z', 'location': 'our main office'}, 'name': 'create_calendar_event'}
</tool_call>
<|im_end|>
2024-01-31:23:45:25,199 INFO     [utils.py:114] Expected: main office
2024-01-31:23:45:25,199 INFO     [utils.py:115] Got: our main office
2024-01-31:23:45:25,199 INFO     [evaluator.py:113] create_calendar_event validation: failed
2024-01-31:23:45:25,199 INFO     [evaluator.py:130] all validations: failed
2024-01-31:23:45:25,199 INFO     [evaluator.py:131] failed tool calls:
<tool_call>
{'arguments': {'title': 'Project Discussion', 'start_time': '2022-04-15T10:00:00Z', 'end_time': '2022-04-15T12:00:00Z', 'location': 'our main office'}, 'name': 'create_calendar_event'}
</tool_call>

2024-01-31:23:45:29,597 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_discount", "description": "Calculate the discounted price based on original price and discount percentage", "parameters": {"type": "object", "properties": {"original_price": {"type": "number", "description": "The original price"}, "discount_percentage": {"type": "number", "description": "The percentage of discount"}}, "required": ["original_price", "discount_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I saw a dress that I liked in a store. It was originally priced at $200 but there's a 20% discount on it. Can you help me calculate the discounted price?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'original_price': 200, 'discount_percentage': 20}, 'name': 'calculate_discount'}
</tool_call>
<|im_end|>
2024-01-31:23:45:29,597 INFO     [evaluator.py:113] calculate_discount validation: passed
2024-01-31:23:45:29,597 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:29,597 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "original_price": 200,
      "discount_percentage": 20
    },
    "name": "calculate_discount"
  }
]
2024-01-31:23:45:33,762 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "search_recipe", "description": "Search for recipes based on specified ingredients", "parameters": {"type": "object", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "The ingredients to search for"}}, "required": ["ingredients"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I have some ingredients and I want to cook something. Can you help me find a recipe?<|im_end|> 
<|im_start|> assistant
Of course! I can help you with that. Please tell me what ingredients you have.<|im_end|> 
<|im_start|> user
I have chicken, broccoli, and cheese.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'ingredients': ['chicken', 'broccoli', 'cheese']}, 'name': 'search_recipe'}
</tool_call>
<|im_end|>
2024-01-31:23:45:33,763 INFO     [evaluator.py:113] search_recipe validation: passed
2024-01-31:23:45:33,763 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:33,763 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "ingredients": [
        "chicken",
        "broccoli",
        "cheese"
      ]
    },
    "name": "search_recipe"
  }
]
2024-01-31:23:45:38,800 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_sunrise_sunset", "description": "Get the sunrise and sunset times", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The city and state, e.g. San Francisco, CA"}, "date": {"type": "string", "description": "The date in YYYY-MM-DD format"}}, "required": ["location", "date"]}}}, {"type": "function", "function": {"name": "convert_currency", "description": "Convert an amount from one currency to another", "parameters": {"type": "object", "properties": {"amount": {"type": "number", "description": "The amount to convert"}, "from_currency": {"type": "string", "description": "The currency to convert from"}, "to_currency": {"type": "string", "description": "The currency to convert to"}}, "required": ["amount", "from_currency", "to_currency"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to know the sunrise and sunset times for New York, NY on 2022-03-20.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'location': 'New York, NY', 'date': '2022-03-20'}, 'name': 'get_sunrise_sunset'}
</tool_call>
<|im_end|>
2024-01-31:23:45:38,801 INFO     [evaluator.py:113] get_sunrise_sunset validation: passed
2024-01-31:23:45:38,801 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:38,801 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "location": "New York, NY",
      "date": "2022-03-20"
    },
    "name": "get_sunrise_sunset"
  }
]
2024-01-31:23:45:43,055 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_news", "description": "Get the latest news based on user's preferences", "parameters": {"type": "object", "properties": {"interests": {"type": "array", "items": {"type": "string"}, "description": "The user's interests to filter the news"}, "location": {"type": "string", "description": "The user's location for local news"}}, "required": ["interests"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hey, can you get me the latest news on technology and sports in New York?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'interests': ['technology', 'sports'], 'location': 'New York'}, 'name': 'get_news'}
</tool_call>
<|im_end|>
2024-01-31:23:45:43,055 INFO     [evaluator.py:113] get_news validation: passed
2024-01-31:23:45:43,055 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:43,055 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "interests": [
        "technology",
        "sports"
      ],
      "location": "New York"
    },
    "name": "get_news"
  }
]
2024-01-31:23:45:49,847 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "analyze_social_media_sentiment", "description": "Analyze sentiment of social media posts", "parameters": {"type": "object", "properties": {"posts": {"type": "array", "items": {"type": "string"}, "description": "The social media posts to analyze"}}}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I have a few social media posts that I'd like to analyze. Can you help me with that?<|im_end|> 
<|im_start|> assistant
Of course, I can help you with that. Please provide me with the social media posts that you want to analyze.<|im_end|> 
<|im_start|> user
Here they are: "I love the new update!", "This app is terrible now", "Best app ever, keep up the good work", "I'm uninstalling this, it's full of bugs".<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'posts': ['I love the new update!', 'This app is terrible now', 'Best app ever, keep up the good work', 'I\'m uninstalling this, it\'s full of bugs']}, 'name': 'analyze_social_media_sentiment'}
</tool_call>
<|im_end|>
2024-01-31:23:45:49,848 INFO     [evaluator.py:113] analyze_social_media_sentiment validation: passed
2024-01-31:23:45:49,848 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:49,848 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "posts": [
        "I love the new update!",
        "This app is terrible now",
        "Best app ever, keep up the good work",
        "I'm uninstalling this, it's full of bugs"
      ]
    },
    "name": "analyze_social_media_sentiment"
  }
]
2024-01-31:23:45:58,517 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_invoice", "description": "Generate an invoice for a transaction", "parameters": {"type": "object", "properties": {"customer_name": {"type": "string", "description": "The name of the customer"}, "order_items": {"type": "array", "items": {"type": "object", "properties": {"product_name": {"type": "string", "description": "The name of the product"}, "quantity": {"type": "integer", "description": "The quantity of the product"}, "price": {"type": "number", "description": "The price of the product"}}, "required": ["product_name", "quantity", "price"]}}, "discount_percentage": {"type": "number", "description": "The discount percentage"}}, "required": ["customer_name", "order_items"]}}}, {"type": "function", "function": {"name": "get_news_articles", "description": "Get news articles based on a search query", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query for news articles"}}, "required": ["query"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I need to generate an invoice for a customer named John Doe. He bought 2 units of Product A for $50 each and 3 units of Product B for $30 each. He also has a discount of 10%.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'customer_name': 'John Doe', 'order_items': [{'product_name': 'Product A', 'quantity': 2, 'price': 50}, {'product_name': 'Product B', 'quantity': 3, 'price': 30}], 'discount_percentage': 10}, 'name': 'generate_invoice'}
</tool_call>
<|im_end|>
2024-01-31:23:45:58,518 INFO     [evaluator.py:113] generate_invoice validation: passed
2024-01-31:23:45:58,518 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:45:58,518 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "customer_name": "John Doe",
      "order_items": [
        {
          "product_name": "Product A",
          "quantity": 2,
          "price": 50
        },
        {
          "product_name": "Product B",
          "quantity": 3,
          "price": 30
        }
      ],
      "discount_percentage": 10
    },
    "name": "generate_invoice"
  }
]
2024-01-31:23:46:02,303 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "play_music", "description": "Play music from a specific genre or artist", "parameters": {"type": "object", "properties": {"genre": {"type": "string", "description": "The genre of music"}, "artist": {"type": "string", "description": "The name of the artist"}}, "required": ["genre", "artist"]}}}, {"type": "function", "function": {"name": "calculate_tip", "description": "Calculate the tip amount for a restaurant bill", "parameters": {"type": "object", "properties": {"bill_amount": {"type": "number", "description": "The total bill amount"}, "tip_percentage": {"type": "number", "description": "The tip percentage to be applied"}}, "required": ["bill_amount", "tip_percentage"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I want to listen to some music. Can you play some rock music by the artist 'Queen'?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'genre': 'rock', 'artist': 'Queen'}, 'name': 'play_music'}
</tool_call>
<|im_end|>
2024-01-31:23:46:02,303 INFO     [evaluator.py:113] play_music validation: passed
2024-01-31:23:46:02,303 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:46:02,303 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "genre": "rock",
      "artist": "Queen"
    },
    "name": "play_music"
  }
]
2024-01-31:23:46:05,528 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_square_root", "description": "Calculate the square root of a number", "parameters": {"type": "object", "properties": {"number": {"type": "number", "description": "The number to calculate the square root of"}}, "required": ["number"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hello, I need some help with a math problem.<|im_end|> 
<|im_start|> assistant
Of course! I'd be happy to help. What's the problem?<|im_end|> 
<|im_start|> user
I need to find the square root of 81.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'number': 81}, 'name': 'calculate_square_root'}
</tool_call>
<|im_end|>
2024-01-31:23:46:05,528 INFO     [evaluator.py:113] calculate_square_root validation: passed
2024-01-31:23:46:05,528 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:46:05,528 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "number": 81
    },
    "name": "calculate_square_root"
  }
]
2024-01-31:23:46:09,776 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "calculate_fuel_efficiency", "description": "Calculate the fuel efficiency in miles per gallon", "parameters": {"type": "object", "properties": {"distance": {"type": "number", "description": "The distance traveled in miles"}, "fuel_consumed": {"type": "number", "description": "The fuel consumed in gallons"}}, "required": ["distance", "fuel_consumed"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to calculate the fuel efficiency of my car. I traveled 500 miles and consumed 20 gallons of fuel.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'distance': 500, 'fuel_consumed': 20}, 'name': 'calculate_fuel_efficiency'}
</tool_call>
<|im_end|>
2024-01-31:23:46:09,777 INFO     [evaluator.py:113] calculate_fuel_efficiency validation: passed
2024-01-31:23:46:09,777 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:46:09,777 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "distance": 500,
      "fuel_consumed": 20
    },
    "name": "calculate_fuel_efficiency"
  }
]
2024-01-31:23:46:13,503 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_upcoming_events", "description": "Get the list of upcoming events", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The category of events"}, "location": {"type": "string", "description": "The location for which events are required"}}, "required": []}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I am looking for some interesting events happening in New York this week. Can you help me find some?<|im_end|> 
<|im_start|> assistant
Of course, I can help with that. Do you have a specific category of events in mind, like music, sports, art, etc.?<|im_end|> 
<|im_start|> user
I am interested in music events.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'category': 'music', 'location': 'New York'}, 'name': 'get_upcoming_events'}
</tool_call>
<|im_end|>
2024-01-31:23:46:13,503 INFO     [evaluator.py:113] get_upcoming_events validation: passed
2024-01-31:23:46:13,503 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:46:13,503 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "category": "music",
      "location": "New York"
    },
    "name": "get_upcoming_events"
  }
]
2024-01-31:23:46:16,547 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "get_news", "description": "Get the latest news", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "The news category, e.g. sports, politics"}}, "required": ["category"]}}}, {"type": "function", "function": {"name": "get_random_quote", "description": "Get a random quote", "parameters": {"type": "object", "properties": {}}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
I want to know the latest news in sports.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'category': 'sports'}, 'name': 'get_news'}
</tool_call>
<|im_end|>
2024-01-31:23:46:16,548 INFO     [evaluator.py:113] get_news validation: passed
2024-01-31:23:46:16,548 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:46:16,548 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "category": "sports"
    },
    "name": "get_news"
  }
]
2024-01-31:23:46:19,941 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "encode_base64", "description": "Encode a given string into base64 format", "parameters": {"type": "object", "properties": {"input_string": {"type": "string", "description": "The input string to be encoded"}}, "required": ["input_string"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need to encode a string into base64 format. Can you help me with that?<|im_end|> 
<|im_start|> assistant
Of course, I can help you with that. Please provide me with the string you want to encode.<|im_end|> 
<|im_start|> user
The string is "Hello, World!"<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'input_string': 'Hello, World!'}, 'name': 'encode_base64'}
</tool_call>
<|im_end|>
2024-01-31:23:46:19,941 INFO     [evaluator.py:113] encode_base64 validation: passed
2024-01-31:23:46:19,941 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:46:19,942 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "input_string": "Hello, World!"
    },
    "name": "encode_base64"
  }
]
2024-01-31:23:46:24,409 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "track_package", "description": "Track the status of a package", "parameters": {"type": "object", "properties": {"tracking_number": {"type": "string", "description": "The tracking number of the package"}, "carrier": {"type": "string", "description": "The carrier of the package"}}, "required": ["tracking_number", "carrier"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, can you help me track my package? I have the tracking number and the carrier details.<|im_end|> 
<|im_start|> assistant
Of course, I'd be happy to help you with that. Could you please provide me with the tracking number and the name of the carrier?<|im_end|> 
<|im_start|> user
Sure, the tracking number is 123456789 and the carrier is FedEx.<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'tracking_number': '123456789', 'carrier': 'FedEx'}, 'name': 'track_package'}
</tool_call>
<|im_end|>
2024-01-31:23:46:24,410 INFO     [evaluator.py:113] track_package validation: passed
2024-01-31:23:46:24,410 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:46:24,410 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "tracking_number": "123456789",
      "carrier": "FedEx"
    },
    "name": "track_package"
  }
]
2024-01-31:23:46:27,463 INFO     [evaluator.py:79] model completion with eval prompt:
<|im_start|> system
You are a function calling AI model. You are provided with function signatures within <tools></tools> XML tags. You may call one or more functions to assist with the user query. Don't make assumptions about what values to plug into functions. Here are the available tools: <tools> [{"type": "function", "function": {"name": "generate_password", "description": "Generate a random password of specified length", "parameters": {"type": "object", "properties": {"length": {"type": "integer", "description": "The length of the password"}}, "required": ["length"]}}}] </tools> Use the following pydantic model json schema for each tool call you will make: {'title': 'FunctionCall', 'type': 'object', 'properties': {'arguments': {'title': 'Arguments', 'type': 'object'}, 'name': {'title': 'Name', 'type': 'string'}}, 'required': ['arguments', 'name']} For each function call return a json object with function name and arguments within <tool_call></tool_call> XML tags as follows:
<tool_call>
{'arguments': <args-dict>, 'name': <function-name>}
</tool_call><|im_end|> 
<|im_start|> user
Hi, I need a new password. Can you generate a 12-character password for me?<|im_end|> 
<|im_start|> assistant
<tool_call>
{'arguments': {'length': 12}, 'name': 'generate_password'}
</tool_call>
<|im_end|>
2024-01-31:23:46:27,463 INFO     [evaluator.py:113] generate_password validation: passed
2024-01-31:23:46:27,464 INFO     [evaluator.py:126] all validations: passed
2024-01-31:23:46:27,464 INFO     [evaluator.py:127] parsed tool calls:
[
  {
    "arguments": {
      "length": 12
    },
    "name": "generate_password"
  }
]
2024-01-31:23:46:27,464 INFO     [utils.py:121] Number of eval tests passed: 85
2024-01-31:23:46:27,464 INFO     [utils.py:122] Number of eval tests failed: 15
2024-01-31:23:46:27,464 INFO     [utils.py:125] fireworks-ai function-calling eval (pass@1): 0.85
